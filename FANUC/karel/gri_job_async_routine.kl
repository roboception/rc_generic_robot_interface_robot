-- File: gri_job_async_routine.kl
-- Contains the communication routine for GRI asynchronous job trigger.

ROUTINE trigger_job_async(job_id_to_send : INTEGER)
  VAR
    local_status        : INTEGER
    i                   : INTEGER -- Loop counter
    server_error        : INTEGER

    -- Request Data
    flange_pose_to_send : XYZWPR
    dummy_int           : INTEGER -- For CURPOS
    req_data_int_arr    : ARRAY[NUM_DATA_INTS_TO_SEND] OF INTEGER

  BEGIN
    local_status = SUCCESS_STATUS
    dummy_int = 0

    FOR i = 1 TO NUM_DATA_INTS_TO_SEND DO
      req_data_int_arr[i] = i * 100 + job_id_to_send
    ENDFOR

    WRITE TPDISPLAY(LPRE_ASYNC, 'Triggering Job: ', job_id_to_send, CR)
    WRITE g_log_file(LPRE_ASYNC, 'Triggering Job: ', job_id_to_send, CR)
    
    flange_pose_to_send = CURPOS(dummy_int, dummy_int)

    -- Use modular routine to build and send request header
    local_status = send_request_header(REQ_ACTION_TRIGGER_JOB_ASYNC, job_id_to_send, LPRE_ASYNC)
    IF local_status <> SUCCESS_STATUS THEN
      RETURN
    ENDIF
    
    -- Use modular routine to send pose data
    local_status = send_pose_data(flange_pose_to_send, LPRE_ASYNC)
    IF local_status <> SUCCESS_STATUS THEN 
      RETURN
    ENDIF

    -- Use modular routine to send data integers
    local_status = send_data_integers(req_data_int_arr, NUM_DATA_INTS_TO_SEND, LPRE_ASYNC)
    IF local_status <> SUCCESS_STATUS THEN
      RETURN
    ENDIF

    -- Use modular routine to read response header with error tolerance
    server_error = read_response_header_with_error_code(REQ_ACTION_TRIGGER_JOB_ASYNC, job_id_to_send, LPRE_ASYNC)
    IF server_error < 0 THEN
      WRITE TPDISPLAY(LPRE_ASYNC, '[ERR_COMM_FAILED]', CR)
      WRITE g_log_file(LPRE_ASYNC, '[ERR_COMM_FAILED]', CR)
      RETURN
    ENDIF

    IF server_error <> GRI_ERR_NO_ERROR THEN
      WRITE TPDISPLAY(LPRE_ASYNC, '[WARN_RESP_ERR_CODE] Server reported error: ', server_error, ' - ', get_error_message(server_error), CR)
      WRITE g_log_file(LPRE_ASYNC, '[WARN_RESP_ERR_CODE] Server reported error: ', server_error, ' - ', get_error_message(server_error), CR)
    ENDIF

    -- Use modular routine to consume response payload
    local_status = consume_response_payload(LPRE_ASYNC)
    IF local_status <> SUCCESS_STATUS THEN
      RETURN
    ENDIF

    WRITE TPDISPLAY(LPRE_ASYNC, 'Success', CR)
    WRITE g_log_file(LPRE_ASYNC, 'Success', CR)

  END trigger_job_async 